{"version":3,"sources":["services/firebase.js","pages/chat.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","text","msgs","setMsgs","typing","setTyping","user","setUser","useForm","register","handleSubmit","watch","errors","socket","io","useEffect","on","data","console","log","newMsg","onSubmit","e","a","msg","target","reset","emit","error","handleOptionChange","changeEvent","value","for","name","onChange","checked","type","map","elem","ref","required","event","Fragment","path","component","Chat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4PAwBAA,gBAZuB,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAMDR,cAAX,I,iBCnBQ,SAASS,IAAO,IAAD,EACFC,mBAAS,CAAC,CAC9BC,KAAM,WAFgB,mBACnBC,EADmB,KACbC,EADa,OAIEH,oBAAS,GAJX,mBAInBI,EAJmB,KAIXC,EAJW,OAKFL,mBAAS,SALP,mBAKnBM,EALmB,KAKbC,EALa,OAOwBC,cAA1CC,EAPkB,EAOlBA,SAAUC,EAPQ,EAORA,aAAcC,EAPN,EAOMA,MAAOC,EAPb,EAOaA,OACjCC,EAASC,IAAG,yBAElBC,qBAAU,WACNF,EAAOG,GAAG,gBAAgB,SAAAC,GACtBC,QAAQC,IAAR,wBAA6BF,IAC7B,IAAMG,EAAS,CACXnB,KAAMgB,GAEVd,GAAQ,SAAAD,GAAI,4BAAQA,GAAR,CAAckB,YAE/B,IAGH,IAAMC,EAAQ,uCAAG,WAAOJ,EAAMK,GAAb,eAAAC,EAAA,sDACb,IACIlB,GAAU,GACJJ,EAAOgB,EAAKO,IAClBF,EAAEG,OAAOC,QACM,CACXzB,QAEJY,EAAOc,KAAK,eAAgB1B,GAG5BiB,QAAQC,IAAIjB,GAEd,MAAO0B,GACLV,QAAQC,IAAIS,GAdH,2CAAH,wDA4DRC,EAAqB,SAAAC,GACvBvB,EAAQuB,EAAYL,OAAOM,QAS/B,OAJAb,QAAQC,IAAIR,EAAM,YAKd,6BACI,6BACI,8BACI,2BAAOqB,IAAI,SAAX,SACA,2BAAOC,KAAK,QAAQF,MAAM,QAAQG,SAAUL,EAAoBM,QAAkB,UAAT7B,EAAkB8B,KAAK,UAAU,6BAC1G,2BAAOJ,IAAI,SAAX,SACA,2BAAOC,KAAK,QAAQF,MAAM,QAAQG,SAAUL,EAAoBM,QAAkB,UAAT7B,EAAkB8B,KAAK,YAGxG,gDACiB9B,IAEjB,6BACMF,EAAS,kBAAoB,IAEnC,6BACKF,EAAKmC,KAAI,SAACC,GACP,OACI,6BAAMA,EAAKrC,UAKvB,0BAAMoB,SAAUX,EAAaW,IAEzB,2BAAOY,KAAK,MAAMM,IAAK9B,EAAS,CAAE+B,UAAU,IAASN,SAAU,SAACO,GACxDA,EAAMhB,OAAOM,MACb1B,GAAU,GAEVA,GAAU,MAIjBO,EAAOY,KAAO,wDAEf,2BAAOY,KAAK,aC/GbrC,MAbf,WACE,OACE,kBAAC,IAAM2C,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,QCHjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLV,QAAQU,MAAMA,EAAMmC,a","file":"static/js/main.0381a1a7.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport * as firebase from \"firebase/app\";\r\n\r\n// If you enabled Analytics in your project, add the Firebase SDK for Analytics\r\nimport \"firebase/analytics\";\r\n\r\n// Add the Firebase products that you want to use\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n\r\n// TODO: Replace the following with your app's Firebase project configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBuv61Nc6-9OBIyGxis6_gQ40xLfcwwuqM\",\r\n    authDomain: \"shonachat-b1048.firebaseapp.com\",\r\n    databaseURL: \"https://shonachat-b1048.firebaseio.com\",\r\n    projectId: \"shonachat-b1048\",\r\n    storageBucket: \"shonachat-b1048.appspot.com\",\r\n    messagingSenderId: \"54270608221\",\r\n    appId: \"1:54270608221:web:850bb7ba5f9fd22a129eb4\",\r\n    measurementId: \"G-1GNSNJ1Q01\"\r\n  };\r\n  \r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = firebase.firestore()","import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { db } from '../services/firebase'\r\nimport io from 'socket.io-client';\r\n \r\n\r\n\r\nexport default function App() {\r\n    const [msgs, setMsgs] = useState([{\r\n        text: 'first'\r\n    }]);\r\n    const [typing, setTyping] = useState(false)\r\n    const [user, setUser] = useState('ajani')\r\n\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const socket = io('http://127.0.0.1:4000');\r\n\r\n    useEffect(() => {\r\n        socket.on(\"chat message\", data => {\r\n            console.log(`chat message: ${data}`)\r\n            const newMsg = {\r\n                text: data\r\n            }\r\n            setMsgs(msgs => [...msgs, newMsg])\r\n        });\r\n    }, []);\r\n\r\n\r\n    const onSubmit = async (data, e) => {\r\n        try {\r\n            setTyping(false)\r\n            const text = data.msg\r\n            e.target.reset()\r\n            const newMsg = {\r\n                text\r\n            }\r\n            socket.emit(\"chat message\", text);\r\n            //setMsgs(msgs => [...msgs, newMsg])\r\n            //const write = await newMessage(text)\r\n            console.log(msgs)\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // useEffect(\r\n    //     () => {\r\n    //       const unsubscribe = db\r\n    //         .collection('messages')\r\n    //         .onSnapshot(\r\n    //           snapshot => {\r\n    //             snapshot.docChanges().forEach(function(change) {\r\n    //                 if (change.type === \"added\") {\r\n    //                     console.log(\"New city: \", change.doc.data());\r\n    //                 }\r\n    //                 if (change.type === \"modified\") {\r\n    //                     console.log(\"Modified city: \", change.doc.data());\r\n    //                 }\r\n    //                 if (change.type === \"removed\") {\r\n    //                     console.log(\"Removed city: \", change.doc.data());\r\n    //                 }\r\n    //             });\r\n    //           },\r\n    //           err => {\r\n    //             setError(err)\r\n    //           }\r\n    //         )\r\n    \r\n    //       // returning the unsubscribe function will ensure that\r\n    //       // we unsubscribe from document changes when our id\r\n    //       // changes to a different value.\r\n    //       return () => unsubscribe()\r\n    //     },\r\n\r\n    //   )\r\n\r\n    const newMessage = (text) => {\r\n        return db.collection('messages')\r\n            .add({\r\n                sender: user,\r\n                text\r\n            });\r\n    };\r\n\r\n    const handleOptionChange = changeEvent => {\r\n        setUser(changeEvent.target.value)\r\n    };\r\n\r\n\r\n\r\n    console.log(watch(\"example\")); // watch input value by passing the name of it\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <form>\r\n                    <label for=\"ajani\">ajani</label>\r\n                    <input name=\"ajani\" value=\"ajani\" onChange={handleOptionChange} checked={user === \"ajani\"} type=\"radio\" /><br />\r\n                    <label for=\"shona\">shona</label>\r\n                    <input name=\"shona\" value=\"shona\" onChange={handleOptionChange} checked={user === \"shona\"} type=\"radio\" />\r\n                </form>\r\n            </div>\r\n            <div>\r\n                {`User is: ${user}`}\r\n            </div>\r\n            <div>\r\n                {(typing ? 'Ajani is typing' : \"\")}\r\n            </div>\r\n            <div>\r\n                {msgs.map((elem) => {\r\n                    return (\r\n                        <div>{elem.text}</div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                {/* include validation with required or other standard HTML validation rules */}\r\n                <input name=\"msg\" ref={register({ required: true })} onChange={(event) => {\r\n                    if (event.target.value) {\r\n                        setTyping(true)\r\n                    } else {\r\n                        setTyping(false)\r\n                    }\r\n                }} />\r\n                {/* errors will return when field validation fails  */}\r\n                {errors.msg && <span>This field is required</span>}\r\n\r\n                <input type=\"submit\" />\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n// import React from 'react';\r\n// import { useForm } from \"react-hook-form\";\r\n\r\n\r\n\r\n\r\n// export default function chat() {\r\n//     const { register, handleSubmit, watch, errors } = useForm()\r\n//     const onSubmit = data => console.log(data);\r\n\r\n//     const messages = [\r\n//         {\r\n//             text: \"high\"\r\n//         },\r\n//         {\r\n//             text: \"bi\"\r\n//         }\r\n//     ]\r\n\r\n//     console.log(watch(\"example\")); // watch input value by passing the name of it\r\n\r\n//     return (\r\n//         <div>\r\n//             {messages.map((elem) => {\r\n//                 return (\r\n//                     <div>{elem.text}</div>\r\n//                 )\r\n//             })}\r\n//             <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n//                 <input name=\"example\" defaultValue=\"test\" ref={register} />\r\n\r\n\r\n//                 <input name=\"exampleRequired\" ref={register({ required: true })} />\r\n\r\n//                 {errors.exampleRequired && <span>This field is required</span>}\r\n\r\n//                 <input type=\"submit\" />\r\n//             </form>\r\n//         </div>\r\n\r\n//     );\r\n// }\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\n\n\n//pages\nimport Chat from './pages/chat'\n\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Chat}  />\n        </Switch>\n      </Router>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}